version: "3"

networks:
    frontend:
        driver: bridge
    backend:
        driver: bridge

volumes:
    mysql:
        driver: local
    redis:
        driver: local

services:
    ### WORKSPACE #########################################
    workspace:
        build: ./workspace
        environment:
            - TZ=${TIMEZONE}
            - GOPROXY=${GOPROXY}
        volumes:
            - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}:cached
        tty: true
        ports:
            - "${MICRO_WEB_PORT}:8082"
        networks:
            - frontend
            - backend
        depends_on:
            - mysql
            - etcd
            - redis

    ### MySQL #############################################
    mysql:
        build:
            context: ./mysql
            args:
                - MYSQL_VERSION=${MYSQL_VERSION}
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - TZ=${TIMEZONE}
        volumes:
            - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
            - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
        ports:
            - "${MYSQL_PORT}:3306"
        networks:
            - backend

    ### Redis #############################################
    redis:
        build: ./redis
        volumes:
            - ${DATA_PATH_HOST}/redis:/data
        ports:
            - "${REDIS_PORT}:6379"
        networks:
            - backend

    ### ETCD ##############################################
    etcd:
        build:
            context: ./etcd
            args:
                - ETCD_VERSION=${ETCD_VERSION}
        # volumes:
        #     - ${DATA_PATH_HOST}/etcd:/etcd-data
        expose:
            - 2379
            - 2380
        networks:
            - backend
        environment:
            - ETCDCTL_API=3
        command:
            - /usr/local/bin/etcd
            # - --data-dir /etcd-data
            - --initial-advertise-peer-urls
            - http://0.0.0.0:2380
            - --listen-peer-urls
            - http://0.0.0.0:2380
            - --advertise-client-urls
            - http://0.0.0.0:2379
            - --listen-client-urls
            - http://0.0.0.0:2379
            - --initial-cluster
            - default=http://0.0.0.0:2380
            # - --initial-cluster-token tkn
            # - --initial-cluster-state new
            # - --log-level info
            # - --logger zap
            # - --log-outputs stderr

    ### ETCDKEEPER ########################################
    etcdkeeper:
        build: ./etcdkeeper
        environment:
            - TZ=${TIMEZONE}
            - GOPROXY=${GOPROXY}
        networks:
            - backend
        ports:
            - "${ETCDKEEPER_PORT}:8080"
        depends_on:
            - etcd

    ### NSQ ###############################################
    nsqlookupd:
        image: nsqio/nsq
        expose:
            - 4160
            - 4161
        networks:
            - backend
        command: /nsqlookupd
    nsqd:
        image: nsqio/nsq
        volumes:
            - ${DATA_PATH_HOST}/nsqd:/data
        depends_on:
            - nsqlookupd
        expose:
            - 4150
            - 4151
        networks:
            - backend
        command: /nsqd --lookupd-tcp-address=nsqlookupd:4160 --data-path=/data
    nsqadmin:
        image: nsqio/nsq
        depends_on:
            - nsqlookupd
        ports:
            - "${NSQADMIN_PORT}:4171"
        networks:
            - backend
        command: /nsqadmin --lookupd-http-address=nsqlookupd:4161

    ### ELASTICSEARCH #####################################
    elasticsearch:
        build:
            context: ./elasticsearch
            args:
                - ELK_VERSION=${ELK_VERSION}
        volumes:
            - "${DATA_PATH_HOST}/elasticsearch:/usr/share/elasticsearch/data"
            - "./elasticsearch/config.yml:/usr/share/elasticsearch/config/elasticsearch.yml"
        expose:
            - "9200"
            - "9300"
        environment:
            - TZ=${TIMEZONE}
            - "ES_JAVA_OPTS=-Xmx512m -Xms512m"
            # 对应到logstash、kibana容器中配置的密码都得改
            - ELASTIC_PASSWORD=root
        networks:
            - backend

    ### LOGSTASH ##########################################
    logstash:
        build:
            context: ./logstash
            args:
                - ELK_VERSION=${ELK_VERSION}
        volumes:
            - "./logstash/pipeline:/usr/share/logstash/pipeline"
            - "./logstash/config.yml:/usr/share/logstash/config/logstash.yml"
        expose:
            - "5044"
            - "9600"
        environment:
            - TZ=${TIMEZONE}
            - "LS_JAVA_OPTS=-Xmx512m -Xms512m"
        networks:
            - backend

    ### KIBANA ############################################
    kibana:
        build:
            context: ./kibana
            args:
                - ELK_VERSION=${ELK_VERSION}
        environment:
            - TZ=${TIMEZONE}
        volumes:
            - ./kibana/config.yml:/usr/share/kibana/config/kibana.yml
        ports:
            - "${KIBANA_HTTP_PORT}:5601"
        networks:
            - backend

    ### FILEBEAT ##########################################
    filebeat:
        build:
            context: ./filebeat
            args:
                - ELK_VERSION=${ELK_VERSION}
        volumes:
            - "./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml"
            - "./filebeat/config/filebeat.template.json:/usr/share/filebeat/filebeat.template.json"
        ports:
            - "${FILEBEAT_PORT}:8080"
        depends_on:
            - elasticsearch
            - logstash
            - kibana
        networks:
            - backend

    ### ADMIN #############################################
    admin:
        build: ./admin
        volumes:
            - ../easy-mall-admin/dist:/html
        environment:
            - TZ=${TIMEZONE}
        ports:
            - "${ADMIN_PORT_HTTP}:80"
            - "${ADMIN_PORT_HTTPS}:443"
        tty: true
        networks:
            - frontend

    ### ADMIN-API #########################################
    admin-api:
        build: ./admin-api
        environment:
            - TZ=${TIMEZONE}
        ports:
            - "${ADMIN_API_PORT_HTTP}:80"
            - "${ADMIN_API_PORT_HTTPS}:443"
        tty: true
        networks:
            - frontend
            - backend
        depends_on:
            - mysql
            - redis
            - etcd

    ### APP-API ###########################################
    app-api:
        build: ./app-api
        environment:
            - TZ=${TIMEZONE}
        ports:
            - "${APP_API_PORT_HTTP}:80"
            - "${APP_API_PORT_HTTPS}:443"
        tty: true
        networks:
            - frontend
            - backend
        depends_on:
            - mysql
            - redis
            - etcd
